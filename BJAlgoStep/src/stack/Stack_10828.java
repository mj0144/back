package stack;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;

/*
정수를 저장하는 스택을 구현한 다음, 입력으로 주어지는 명령을 처리하는 프로그램을 작성하시오.

명령은 총 다섯 가지이다.

push X: 정수 X를 스택에 넣는 연산이다.
pop: 스택에서 가장 위에 있는 정수를 빼고, 그 수를 출력한다. 만약 스택에 들어있는 정수가 없는 경우에는 -1을 출력한다.
size: 스택에 들어있는 정수의 개수를 출력한다.
empty: 스택이 비어있으면 1, 아니면 0을 출력한다.
top: 스택의 가장 위에 있는 정수를 출력한다. 만약 스택에 들어있는 정수가 없는 경우에는 -1을 출력한다.
 * */

/*
첫째 줄에 주어지는 명령의 수 N (1 ≤ N ≤ 10,000)이 주어진다. 둘째 줄부터 N개의 줄에는 명령이 하나씩 주어진다. 
주어지는 정수는 1보다 크거나 같고, 100,000보다 작거나 같다. 문제에 나와있지 않은 명령이 주어지는 경우는 없다.
 * */

/*
출력해야하는 명령이 주어질 때마다, 한 줄에 하나씩 출력한다.
 * */
/*
14
push 1
push 2
top
size
empty
pop
pop
pop
size
empty
pop
push 3
empty
top
 * */
/*
2
2
0
2
1
-1
0
1
-1
0
3
 * */
public class Stack_10828 {
	
	static List<Integer> stack = new ArrayList<Integer>();

	
	//push,pop,size,empty, top
	public static void main(String[] args) throws NumberFormatException, IOException {
		//스택 뭘로 구현했었지?
		//FILO
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int n = Integer.parseInt(br.readLine()); //명령어 횟수
		int[] statusList = new int[n];
		for(int i=0; i<n; i++) {
			String st  = br.readLine(); //명령
			int status=0;
			switch (st) {
			case "top":
				status = top();
				break;
			case "pop":
				status = pop();
				break;			
			case "size":
				status=size();
				break;
			case "empty":
				status=empty();
				break;
				
			default:
				int a = Integer.parseInt(st.split(" ")[1]);
				push(a);
				status=-2;
				break;
			}
				statusList[i] = status;
		}
		for(int e : statusList) {
			if(e != -2)
				System.out.println(e);

		}
		
	}
	
	//정수 X를 스택에 넣는 연산이다.
	public static void push(int a) {
		stack.add(a);
	}
	//스택의 가장 위에 있는 정수를 출력한다. 만약 스택에 들어있는 정수가 없는 경우에는 -1을 출력
	public static int top() {
		if(empty() == 1) { //없을 때
			return -1;
		}else {
			return stack.get(stack.size()-1);
		}
	}
	//스택에 들어있는 정수의 개수를 출력한다.
	public static int size() {
		return stack.size();
	}
	
	//스택이 비어있으면 1, 아니면 0을 출력
	public static int empty() {
		if(stack.isEmpty()) {
			return 1;
		}else {
			return 0;
		}
	}
	
	//스택에서 가장 위에 있는 정수를 빼고, 그 수를 출력한다. 만약 스택에 들어있는 정수가 없는 경우에는 -1을 출력
	public static int pop() {
		if(empty()==1) {
			return -1;
		}else {
			int top = stack.get(stack.size()-1);
			stack.remove(stack.size()-1);
			return top;
		}
		
	}
	
	
}
